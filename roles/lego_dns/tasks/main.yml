---
- name: Install lego packages
  ansible.builtin.package:
    name: '{{ lego_dns_packages }}'
    state: present

- name: Create lego directories
  ansible.builtin.file:
    path: '/etc/lego/'
    state: directory
    owner: _lego
    group: _lego
    mode: '0700'

- name: Create lego environment
  ansible.builtin.template:
    src: homelab_domain.env.j2
    dest: '/etc/lego/homelab_dns_{{ lego_dns_domain }}.env'
    mode: '0600'
    owner: _lego
    group: _lego

- name: Create certificates using lego
  ansible.builtin.command:
    cmd:
      /usr/local/bin/lego --accept-tos
      --dns {{ lego_dns_provider }}
      --path /etc/lego
      --email {{ lego_dns_mail }}
      --domains '*.{{ lego_dns_domain }}'
      {% if lego_dns_acme_server is defined %}--server {{ lego_dns_acme_server }} {% endif %}
      {{ lego_dns_args }}
      run
    creates: '/etc/lego/certificates/_.{{ lego_dns_domain }}.crt'
  environment: '{{ lego_dns_env }}'
  become: true
  become_user: _lego
  notify: restart services

- name: Install certificates
  ansible.builtin.copy:
    src: '/etc/lego/certificates/{{ item.src }}'
    dest: '{{ item.key.path }}'
    remote_src: true
    owner: '{{ item.key.owner | default("root") }}'
    group: '{{ item.key.group | default("wheel") }}'
    mode: '{{ item.key.mode | default("0640") }}'
  with_items:
    - src: '_.{{ lego_dns_domain }}.crt'
      key: '{{ lego_dns_pubkey }}'
    - src: '_.{{ lego_dns_domain }}.key'
      key: '{{ lego_dns_privkey }}'

- name: Install daily.local.lego_dns_domain
  ansible.builtin.template:
    src: daily.local.lego_dns_domain.j2
    dest: '/etc/daily.local.d/lego_dns_{{ lego_dns_domain }}'
    owner: root
    group: wheel
    mode: '0640'

- name: Flush handlers
  ansible.builtin.meta: flush_handlers
